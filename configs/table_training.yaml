data:
  train:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.table_dataset
        class: TableDataset
        TableDataset:
          compound_coef: 0
          dirname: '''dataset/TABLE/train'''
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpeg''', '''*.JPG''', '''*.PNG''', '''*.JPEG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            TABLE: 0
            borderless_table: 0
            bordered_table: 0
            color_table: 0
          transforms:
            - iaa.MotionBlur()
            - iaa.ChangeColorTemperature()
            - iaa.GaussianBlur(sigma=(0, 1))
            - iaa.Grayscale(alpha=(0.0, 1.0))
            - iaa.Add(value=(-50, 50), per_channel=True)
            - iaa.Fliplr(p=0.5)
            - iaa.Flipud(p=0.5)
            - iaa.Crop(percent=(0, 0.1))
            - iaa.Pad(percent=(0, 0.1), keep_size=False)
            - iaa.Rot90(k=[0, 1, 2, 3], keep_size=False)
            - iaa.Affine(rotate=(0, 360), shear=(-2, 2), fit_output=True)
      batch_size: 16
      shuffle: True
      collate_fn: 'lambda batch:tuple(zip(*batch))'
  
  train_eval:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.table_dataset
        class: TableDataset
        TableDataset:
          compound_coef: 0
          dirname: '''dataset/TABLE/train'''
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpeg''', '''*.JPG''', '''*.PNG''', '''*.JPEG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            TABLE: 0
            borderless_table: 0
            bordered_table: 0
            color_table: 0
      batch_size: 16
      shuffle: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'
  
  valid:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.table_dataset
        class: TableDataset
        TableDataset:
          compound_coef: 0
          dirname: '''dataset/TABLE/valid'''
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpeg''', '''*.JPG''', '''*.PNG''', '''*.JPEG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            TABLE: 0
            borderless_table: 0
            bordered_table: 0
            color_table: 0
      batch_size: 16
      shuffle: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'

loss:
  module: flame.core.loss.focal_loss
  class: FocalLoss
  FocalLoss:
    alpha: 0.25
    gamma: 2.0
    lamda: 50.0
    device: '''cuda'''

model:
  module: flame.core.model.efficientdet
  class: EfficientDet
  EfficientDet:
    # pretrained_weight: '''checkpoint/efficientdet_pretrained_weight/efficientdet-d0.pth'''
    head_only: False
    num_classes: 1
    compound_coef: 0
    backbone_pretrained: True
    scales: ['2 ** 0', '2 ** (1.0 / 3.0)', '2 ** (2.0 / 3.0)']
    aspect_ratios: ['(1.0, 1.0)', '(1.4, 0.7)', '(0.7, 1.4)', '(1.8, 0.3)']
    iou_threshold: 0.2
    score_threshold: 0.2

optim:
  module: torch.optim
  class: SGD
  SGD:
    params: config['model'].parameters()
    lr: 0.08
    momentum: 0.9
    nesterov: True

train_evaluator:
  module: flame.handlers.metric_evaluator
  class: MetricEvaluator
  MetricEvaluator:
    dataset: config['data']['train_eval']
    device: '''cuda'''

valid_evaluator:
  module: flame.handlers.metric_evaluator
  class: MetricEvaluator
  MetricEvaluator:
    dataset: config['data']['valid']
    device: '''cuda'''

metrics:
  module: flame.handlers.metrics.metrics
  class: Metrics
  Metrics:
    metrics:
      mAP:
        module: flame.handlers.metrics.mAP
        class: mAP
        mAP:
          num_classes: 1
          iou_threshold: 0.5
          box_format: '''corners'''
          output_transform: 'lambda x: (x[0], x[1])'
    attach_to:
      train_evaluator: '''train'''
      valid_evaluator: '''valid'''

screenlogger:
  module: flame.handlers.screenlogger
  class: ScreenLogger
  ScreenLogger:
    eval_names:
      - '''train''' 
      - '''valid'''

history:
  module: flame.handlers.checkpoint
  class: History

checkpoint_loader:
  module: flame.handlers.checkpoint
  class: CheckpointLoader
  CheckpointLoader:
    checkpoint_path: ''''''
    mode: '''train'''

terminate_on_nan:
  module: flame.handlers.terminate_on_nan
  class: TerminateOnNan

lr_scheduler:
  module: flame.handlers.lr_scheduler
  class: ReduceLROnPlateau
  ReduceLROnPlateau:
    score_name: '''mAP'''
    evaluator_name: '''valid_evaluator'''
    mode: '''max'''
    patience: 10
    verbose: True

# early_stopping:
#   module: flame.handlers.early_stopping
#   class: EarlyStopping
#   EarlyStopping:
#     score_name: '''mAP'''
#     evaluator_name: '''valid_evaluator'''
#     mode: '''max'''
#     patience: 50

best_saver:
  module: flame.handlers.checkpoint
  class: BestSaver
  BestSaver:
    dirname: '''checkpoint/TABLE/efficientdet-d0'''
    score_name: '''mAP'''
    mode: '''max'''
    evaluator_name: '''valid_evaluator'''
    n_saved: 1

backup_saver:
  module: flame.handlers.checkpoint
  class: BackupSaver
  BackupSaver:
    modules:
      - '''model'''
      - '''optim'''
      - '''backup_saver'''
      - '''best_saver'''
      - '''history'''
      - '''lr_scheduler'''
      # - '''early_stopping'''
    dirname: '''checkpoint/TABLE/efficientdet-d0'''
    save_interval: 1
    n_saved: 1

engine:
  module: flame.core.engine.engine
  class: Trainer
  Trainer:
    dataset: config['data']['train']
    device: '''cuda'''
    max_epochs: 10000
    max_norm: 0.1
    norm_type: 2

extralibs:
  torch: torch
  iaa: imgaug.augmenters